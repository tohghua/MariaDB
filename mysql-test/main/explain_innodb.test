--echo #
--echo # MDEV-26249: Crash in in Explain_node::print_explain_for_children while writing to the slow query log
--echo #

--source include/have_innodb.inc
--source include/innodb_stable_estimates.inc

set @sql_tmp=@@slow_query_log;
SET GLOBAL slow_query_log = 1;
SET long_query_time = 0.000000;
SET log_slow_verbosity = 'explain';

CREATE TABLE t1 ( id varchar(50), KEY (id)) engine=innodb;
SELECT * FROM (SELECT id FROM t1 GROUP BY id) dt WHERE 1=0;
select 1;

explain
SELECT * FROM (SELECT id FROM t1 GROUP BY id) dt WHERE 1=0;

SET GLOBAL slow_query_log = @sql_tmp;
drop table t1;

--echo #
--echo # End of 10.4 tests
--echo #

--echo #
--echo # MDEV-33752: EXPLAIN UPDATE acquires locks on table rows
--echo #
--source include/have_metadata_lock_info.inc

create table t1 (
  id BIGINT(19) NOT NULL,
  id2 BIGINT(19) NOT NULL,
  b tinyint(1) default 0,
  PRIMARY KEY (id, id2),
  UNIQUE KEY (id)
) engine=innodb;

create table t2 (
  id BIGINT(19) NOT NULL,
  b tinyint(1) default 0,
  PRIMARY KEY (id)
) engine=innodb;

insert into t1 values (1,11,0),(3,13,0),(4,14,0),(5,15,0);
insert into t2 values (1,0),(3,0),(4,0),(5,0);

--connect (con1,localhost,root,,)
--connection con1
set autocommit = 0;
set session transaction isolation level repeatable read;

explain update t2 set b=1 where id = (select id from t1 where id2 in (11));

--echo # Check that we hold on to MDL locks:
select LOCK_MODE, LOCK_TYPE, TABLE_SCHEMA, TABLE_NAME from information_schema.metadata_lock_info;

--connection default
--echo # Check that we don't hold row locks (if we did, this would hang) :
begin;
insert into t1 values (2,12,0);
rollback;

connection con1;
--echo # Now, run the UPDATE, not EXPLAIN:
update t2 set b=1 where id = (select id from t1 where id2 in (11));

--echo # And check that it has acquired the locks. Now, INSERT will wait on the lock:
connection default;
send insert into t1 values (2,12,0);

--echo # Verify it's waiting
connection con1;
let $wait_condition=
  SELECT * FROM information_schema.innodb_trx
  WHERE trx_query like 'insert into t1%' AND
  trx_operation_state = 'inserting' AND
  trx_state = 'LOCK WAIT';
--source include/wait_condition.inc

--echo # Check what the INSERT is waiting on:
# --query_vertical select * from information_schema.innodb_lock_waits
select lock_type, lock_table, lock_mode, lock_index from information_schema.innodb_locks;
rollback;
disconnect con1;
connection default;
reap;
drop table t1, t2;

